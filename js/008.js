/*
 *
 * Capture - –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –≤–∏–Ω–¥–æ–≤,
 * –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Å–µ —É–∑–ª—ã-–ø—Ä–µ–¥–∫–∏
 *
 * Target phase - —É–≤–µ–¥–æ–º–ª—è–µ—Ç —É–∑–µ–ª –æ —Ç–æ–º, —á—Ç–æ
 * —Å–æ–±—ã—Ç–∏–µ –¥–æ—à–ª–æ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 *
 * Bubbling phase - —Å–æ–±—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑
 * –≤—Å–µ —É–∑–ª—ã-–ø—Ä–µ–¥–∫–∏, –¥–æ –≤–∏–Ω–¥–æ–≤
 *
 */

/**
 *
 * –í—Å–ø–ª—ã–∏–µ —Å–æ–±—ã—Ç–∏—è
 *
 * event.target - (—Å–≤–æ–π—Å—Ç–≤–æ) —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
 * –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –∫–ª–∏–∫)
 *
 * event.currentTarget - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç,
 * –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã —Å–ª–æ–≤–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ (—ç–ª–µ–º–µ–Ω—Ç –Ω–∞
 * –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤–µ—Å–∏–ª–∏ –æ–±—Ä–∞—é–æ—Ç—á–∏–∫)
 *
 */

/*

// - –ö–æ–Ω—Ü–µ–ø—Ü–∏—è target –∏ currentTarget

const refs = {
   parent: document.querySelector("#parent"),
   child: document.querySelector("#child"),
   innerChild: document.querySelector("#inner-child")
};

const parentClickHandler = event => {
   console.log("PARENT click handler");
   console.log("target:", event.target);
   console.log("currentTarget:", event.currentTarget);
};

const childClickHandler = event => {
   console.log("CHILD click handler");
   console.log("target:", event.target);
   console.log("currentTarget:", event.currentTarget);
};

const innerChildClickHandler = event => {
   // event.stopPropagation(); // –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–ø–ª—ã—Ç–∏—è (–Ω–∞ –æ–±—ä–µ–∫—Ç–µ —Å–æ–±—ã—Ç–∏—è)
   console.log("INNER CHILD click handler");
   console.log("target:", event.target);
   console.log("currentTarget:", event.currentTarget);
};

refs.parent.addEventListener("click", parentClickHandler);
refs.child.addEventListener("click", childClickHandler);
refs.innerChild.addEventListener("click", innerChildClickHandler);

*/
/*

/**
 *
 * –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π (event delegation)
 *
 * –≠—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –≤–∞–∂–Ω–µ–π—à–∏–π –ø—Ä–∏—ë–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * - –°—Ç–∞–≤–∏–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∏—Ö –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–∫–∞
 *
 */

/*

// - –í–µ—à–∞–µ–º –∫–ª–∞—Å—Å active –Ω–∞ –≤—Å–µ, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

// –û–±—ä–µ–∫—Ç —Å—Å—ã–ª–æ–∫
const refs = {
   tags: document.querySelector(".js-tags"),
};

// –í–µ—à–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
refs.tags.addEventListener("click", onTagsClick);

// –§—É–Ω–∫—Ü–∏—è –∫–ª–∏–∫–∞
function onTagsClick(event) {

   // –ü–æ–∫–∞–∑–∞—Ç—å –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∏–∫–Ω—É–ª–∏
   console.log(event.target.nodeName);

   // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
   if (event.target.nodeName === "BUTTON") {

   // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active –ø—Ä–∏ –∫–ª–∏–∫–µ
   const tagBtn = event.target;
      tagBtn.classList.add("active");
   };
};

*/
/*

// - –í–µ—à–∞–µ–º –∫–ª–∞—Å—Å active —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

const refs = {
   tags: document.querySelector(".js-tags"),
};

refs.tags.addEventListener("click", onTagsClick);

function onTagsClick(event) {
   if (event.target.nodeName !== "BUTTON") {
      console.log("–≠—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞");
   };

   // –ò—â–µ–º –≤ ul —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º active
   const currentActiveTag = event.currentTarget.querySelector('.active');

   // –ï—Å–ª–∏ currentTarget === true, —Ç–æ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å
   if (currentActiveTag) {
      currentActiveTag.classList.remove("active");
   }

   // –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–ª–∏–∫–Ω—É—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç
   const nextActiveTag = event.target;
   nextActiveTag.classList.add("active")
};

*/
/*

// - –ü—Ä–∏ –∫–ª–∏–∫–µ –≤–µ—à–∞–µ–º –∫–ª–∞—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞
// –∏ —Å–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å —Å –Ω–∞–∂–∞—Ç–æ–π —Ä–∞–Ω–µ–µ.
// - –ì–æ—Ç–æ–≤—ã–π –∫–æ–¥ (–æ–±—ä–µ–¥–∏–Ω–∏–ª –¥–≤–∞ –ø—Ä–µ–¥–∏–¥—É—â–∏—Ö)

const refs = {
   tags: document.querySelector(".js-tags"),
};

refs.tags.addEventListener("click", onTagsClick);


function onTagsClick(event) {
   console.log(event.target.nodeName);
   const currentActiveTag = event.currentTarget.querySelector('.active')
   const tagBtn = event.target;

   if (event.target.nodeName === "BUTTON") {
      tagBtn.classList.add("active");

      if (currentActiveTag) {
      currentActiveTag.classList.remove("active");
      };
   };
};

*/
/*

// - –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ dataset.value

const refs = {
   tags: document.querySelector(".js-tags"),

   // –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç p –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ dataset.value
   activeTagOutput: document.querySelector(".js-active-tag"),
};

refs.tags.addEventListener("click", onTagsClick);

function onTagsClick(event) {
   const currentActiveTag = event.currentTarget.querySelector('.active')
   const tagBtn = event.target;

   if (event.target.nodeName === "BUTTON") {
      tagBtn.classList.add("active");

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–Ω–∏–µ (dataset.value)
      refs.activeTagOutput.textContent = console.log(tagBtn.dataset.value);

      if (currentActiveTag) {
         currentActiveTag.classList.remove("active");
      };
   };
};

*/
/*

// - –ì–æ—Ç–æ–≤—ã–π –∫–æ–¥ –∏–∑ –≤—Å–µ—Ö –≤—ã—à–µ –∏–∑–ª–æ–∂–µ–Ω–Ω—ã—Ö

const refs = {
   tags: document.querySelector(".js-tags"),
   activeTagOutput: document.querySelector(".js-active-tag"),
};

refs.tags.addEventListener("click", onTagsClick);

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–∞ –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–µ–º
// —á—Ç–æ–±—ã –º—ã –∫–ª–∏–∫–Ω—É–ª–∏ —Ç—É–¥–∞ –∫—É–¥–∞ –Ω—É–∂–Ω–æ

function onTagsClick(event) {
  if (event.target.nodeName !== "BUTTON") {
     console.log("–≠—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞");
     return;
   }; 

   const nextActiveTag = event.target;
   const activeTagValue = nextActiveTag.dataset.value;

   // –≤–æ –≤—Ä–µ–º—è –∫–ª–∏–∫–∞ —Å–µ—Ç–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–≥
   setActiveTag(nextActiveTag);

   // –∏ –∞–ø–¥–µ–π—Ç–∏—Ç—Å—è –∞—É—Ç–ø—É—Ç
   updateOutput(activeTagValue);
};

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–≥ nextActiveTag –∏
// —Å–Ω–∏–º–∞–µ—Ç –∫–ª–∞—Å—Å —Å –ø—Ä–µ–¥–∏–¥—É—â–µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–∫–Ω—É–ª–∏
function setActiveTag(nextActiveTag) {
   const currentActiveTag = refs.tags.querySelector('.active')

   if (currentActiveTag) {
      currentActiveTag.classList.remove("active")
   };

   nextActiveTag.classList.add("active");
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ dataset.value
function updateOutput(value) {
   refs.activeTagOutput.textContent = value;
};

*/
/*

JS - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —è–∑—ã–∫ 
(–≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª. –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Ç–Ω–æ) 

Throttle

–ü—Ä–∏–µ–º throttle –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ 
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–∑, –∫–æ—Ç–æ—Ä–æ–µ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç 
–±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏. 
–¢–æ –µ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ 
—á–∞—â–µ —á–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ N –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, 
–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –µ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

–ò—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∞ —Å–∫—Ä–æ–ª–µ –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ

_.throttle(func, [wait=0], [options={}])

Debounce

–ü—Ä–∏–µ–º debounce –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ 
–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞–Ω–∞ —Å–Ω–æ–≤–∞, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç 
–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –µ–µ 
–≤—ã–∑–æ–≤–∞. –¢–æ –µ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, 
—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ N –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –±–µ–∑ –µ–µ 
–≤—ã–∑–æ–≤–∞, –≥—Ä—É–ø–ø–∏—Ä—É—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –≤ –æ–¥–∏–Ω

–ò—Å–ø–æ–ª—å–∑—É—é—Ç –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∂–∏–≤–æ–π –ø–æ–∏—Å–∫

*/

// https://lodash.com
// https://lodash.com/docs/4.17.15

/**
 * 
 * - mousemove
 * 
 */

/*

// –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Throttle

const coordsOutputRef = document.querySelector(".js-coords");
let mouseMoveCallbackCounter = 0;

window.addEventListener("mousemove", event => {
   mouseMoveCallbackCounter += 1;

   coordsOutputRef.textContent = `–ö–æ–ª-–≤–æ –≤—ã–∑–æ–≤–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–∏ üí© : ${mouseMoveCallbackCounter},
   X: ${event.clientX},
   Y: ${event.clientY}`;
});

*/
/*

// –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Throttle

const coordsOutputRef = document.querySelector(".js-coords");
let mouseMoveCallbackCounter = 0;

const throttledMousemoveCallback = _.throttle(event => {
   mouseMoveCallbackCounter += 1;

   coordsOutputRef.textContent = `–ö–æ–ª-–≤–æ –≤—ã–∑–æ–≤–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–∏ üí© : ${mouseMoveCallbackCounter},
   X: ${event.clientX},
   Y: ${event.clientY}`;
}, 200);

window.addEventListener("mousemove", throttledMousemoveCallback);

*/

/**
 * 
 * - input
 * 
 */

/*

// –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Debounce

const inputRef = document.querySelector(".js-input");
const outputRef = document.querySelector(".js-output");
let inputCallbackCounter = 0;

inputRef.addEventListener("input", event => {
   inputCallbackCounter += 1;

   outputRef.textContent = `
   –ö–æ–ª-–≤–æ –≤—ã–∑–æ–≤–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–∏ üí© : ${inputCallbackCounter},
   –ó–Ω–∞—á–Ω–∏–µ: ${event.target.value}`;
});

*/
/*

// –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Debounce

const inputRef = document.querySelector(".js-input");
const outputRef = document.querySelector(".js-output");
let inputCallbackCounter = 0;

const debounceInputCallback = _.debounce(event => {
   inputCallbackCounter += 1;

   outputRef.textContent = `
   –ö–æ–ª-–≤–æ –≤—ã–∑–æ–≤–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–∏ üí© : ${inputCallbackCounter},
   –ó–Ω–∞—á–Ω–∏–µ: ${event.target.value}`;
}, 3000);

inputRef.addEventListener("input", debounceInputCallback);

*/

/**
 * 
 * Intersection Observer API (class)
 * 
 * –≠—Ç–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å 
 * –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ —É–ø—Ä–æ—â–∞–µ—Ç 
 * —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Ö 
 * –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º-–ø—Ä–µ–¥–∫–æ–º 
 * –∏–ª–∏ —Å–∞–º–∏–º –æ–∫–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (viewport), 
 * —Ç–æ –µ—Å—Ç—å —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å—é —ç–ª–µ–º–µ–Ω—Ç–∞
 * API - —ç—Ç–æ –Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤
 * 
 * Observer (–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å, –æ–±–∑–µ—Ä–≤–µ—Ä) - —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
 * –≤—ã–∑–æ–≤–∞ –∫–ª–∞—Å—Å–∞ IntersectionObserver, –µ–≥–æ 
 * —ç–∫–∑–µ–º–ø–ª—è—Ä, –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏.
 * 
 * Root (–∫–æ—Ä–µ–Ω—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç) - —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç, 
 * –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞-—Ü–µ–ª–∏. 
 * –û—Å–Ω–æ–≤–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ –æ–∫–Ω–æ 
 * –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (viewport), –Ω–æ –º–æ–∂–µ—Ç 
 * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç, 
 * –µ—Å–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–∞—á–∞.
 * 
 * Target (—Ü–µ–ª—å) - —ç–ª–µ–º–µ–Ω—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥–∏—Ç 
 * –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∏ –æ–ø–æ–≤–µ—â–∞–µ—Ç –æ –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤ 
 * –∫–æ—Ä–µ–Ω—å. –¶–µ–ª—å—é –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç. 
 * –û–¥–∏–Ω –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å 
 * –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π.
 * 
 */

/*

// 1. 
// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä IntersectionObserve()
// –≤ —Å–∫–æ–±–∫–∏ –ø–µ—Ä–µ–¥–ø–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è
// –ø–æ–ª—É—á–∏—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - entries - —ç—Ç–æ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è (–º–∞—Å—Å–∏–≤ –≤—Ö–æ–∂–¥–µ–Ω–∏–π)
// - observer - —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–º —ç–∫–∑–µ–º–ø–ª—è—Ä (—Ç–æ —á—Ç–æ –æ–Ω –≤–µ—Ä–Ω–µ—Ç)
// –ö–æ–≥–¥–∞ boxRef –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å root (viewport)
// –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è callback
const io = new IntersectionObserver((entries, observer) => {
   entries.forEach(entry => {
      console.log(entry);

      // –µ—Å–ª–∏ –æ–±—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –≤—ã–≤–æ–¥–∏ —Ñ—Ä–∞–∑—É 
      if (entry.isIntersecting) {
         console.log(`Box ${entry.target.textContent} –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç Root`);
      }
   })
})

// –ù–∞—Ö–æ–¥–∏–º .js-box
const boxRef = document.querySelector(".js-box");

// –≤ —Å–∫–æ–±–∫–∞—Ö —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–±–ª—é–¥–∞—Ç—å 
io.observe(boxRef);

*/
/*

// 2.
// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ rootMargin –∏ threshold

const onEnrey = (entries, observer) => {
   entries.forEach(entry => {
      if (entry.isIntersecting) {
         console.log(`Box ${entry.target.textContent} –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç Root`);
      }
   })
}

const options = {
   rootMargin: "100px", // –º–∞—Ä–∂–∏–Ω –¥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
   // threshold: [0, 0.25, 0.5, 0.75, 1], // –ø—Ä–æ—Ü–µ–Ω—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
};

const io = new IntersectionObserver(onEnrey, options)

const boxRef = document.querySelector(".js-box");

io.observe(boxRef);

*/
/*

// 3.
// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≤—Å—ë

const onEntrey = (entries, observer) => {
   entries.forEach(entry => {
      console.log(entry)
      
      if (entry.isIntersecting) {
         console.log(`Box ${entry.target.textContent} –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç Root`);

         // –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ —Å–ª–µ–¥–∏—Ç
         observer.disconnect();
      }
   })
}

const options = {
   // rootMargin: "100px", // –º–∞—Ä–∂–∏–Ω –¥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
   // threshold: [0, 0.25, 0.5, 0.75, 1], // –ø—Ä–æ—Ü–µ–Ω—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
};

const io = new IntersectionObserver(onEntrey, options)

const boxRef = document.querySelector(".js-box");

io.observe(boxRef);

*/

/**
 * 
 * - Geri
 * 
 */

// Scroll 

/*

// 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é

const refs = {
   progress: document.querySelector(".progress-008"),
   sections: document.querySelector(".sections-008"),
   sectionList: document.querySelectorAll(".section-008"),
}

// –í value –ø—Ä–æ–≥—Ä–µ—Å—Å –ª–∏–Ω–∏–∏ –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ sections.clientHeight
refs.progress.value = refs.sections.clientHeight;

// –í max –ø—Ä–æ–≥—Ä–µ—Å—Å –ª–º–Ω–∏–∏ –ø—Ä–∏—ã–≤–∞–µ–≤–∞–µ–º sections.scrollHeight
refs.progress.max = refs.sections.scrollHeight;

function handleScroll(e) {
   refs.progress.value = e.target.scrollTop + refs.sections.clientHeight;

   console.log("scroll...");
}

// –≤–µ—à–∞–µ–º –Ω–∞ –¥–∏–≤ —Å —Å–µ–∫—Ü–∏—è–º–∏ —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª
refs.sections.addEventListener("scroll", handleScroll);

*/

/**
 * –í google –Ω–∞–±—Ä–∞—Ç—å cdnjs lodash
 * –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É .min –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Ö—ç–¥
 * https://cdnjs.com/libraries/lodash.js
 * 
 * –í –≥—É–≥–ª–µ –Ω–∞–±–∏—Ä–∞–µ–º lodash 
 * –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ Documentation –≤ –æ—Ä–≥–∞–Ω–∏—á. –ø–æ–∏—Å–∫–µ
 * 
 */

/*

// 2. Debounce cdn Lodash
// - –ñ–¥–µ—Ç –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç

const refs = {
   progress: document.querySelector(".progress-008"),
   sections: document.querySelector(".sections-008"),
   sectionList: document.querySelectorAll(".section-008"),
}

refs.progress.value = refs.sections.clientHeight;
refs.progress.max = refs.sections.scrollHeight;

function handleScroll(e) {
   refs.progress.value = e.target.scrollTop + refs.sections.clientHeight;

   console.log("scroll...");
}

refs.sections.addEventListener("scroll", _.debounce(handleScroll, 500));

*/
/*

// 3. Trottle cdn Lodash
// - –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ –æ—Ç—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏

const refs = {
   progress: document.querySelector(".progress-008"),
   sections: document.querySelector(".sections-008"),
   sectionList: document.querySelectorAll(".section-008"),
}

refs.progress.value = refs.sections.clientHeight;
refs.progress.max = refs.sections.scrollHeight;

function handleScroll(e) {
   refs.progress.value = e.target.scrollTop + refs.sections.clientHeight;

   console.log("scroll...");
}

refs.sections.addEventListener("scroll", _.throttle(handleScroll, 300));

*/

// Input

/*

// 1. Debounce cdn Lodash
// - –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ

const refs = {
   input: document.querySelector("#input"),
};

const handleInput = (e) => {
   console.log("Search:", e.target.value)
};

// –î–µ–±–∞—É–Ω—Å–∏–º –≤–≤–æ–¥ –≤ –∏–Ω–ø—É—Ç
refs.input.addEventListener("input", _.debounce(handleInput, 400));

*/
/*

// –ü–∏—à–µ–º —Å–≤–æ–π Debounce

const refs = {
   progress: document.querySelector(".progress-008"),
   sections: document.querySelector(".sections-008"),
   sectionList: document.querySelectorAll(".section-008"),
}

refs.progress.value = refs.sections.clientHeight;
refs.progress.max = refs.sections.scrollHeight;

function debounce(callback, delay) {

   // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –æ—á–µ—Ä–µ–¥–∏
   let debounceId

   return function (e) {

      // –û—Ç–æ–¥–≤–∏–≥–∞–µ–º –∑–∞–ø—É—Å–∫ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–∞
      clearTimeout(debounceId);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ñ—É–µ–∫—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –ø–æ–∑–∂–µ
      debounceId = setTimeout(() => {
         callback(e);
      }, delay);
   };
};

function handleScroll(e) {
   refs.progress.value = e.target.scrollTop + refs.sections.clientHeight;

   console.log("scroll...");
}

refs.sections.addEventListener("scroll", debounce(handleScroll, 500));

*/
/*

// –ü–∏—à–µ–º —Å–≤–æ–π Throttle

const refs = {
   progress: document.querySelector(".progress-008"),
   sections: document.querySelector(".sections-008"),
   sectionList: document.querySelectorAll(".section-008"),
}

refs.progress.value = refs.sections.clientHeight;
refs.progress.max = refs.sections.scrollHeight;

function throttle(callback, delay) {
   let throttleId;

   return function (e) {

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å id - –∑–Ω–∞—á–∏—Ç –≤—ã–π—Ç–∏
      if (throttleId) {
         return;
      }

      throttleId = setTimeout(() => {
         callback(e);

         // –ß–∏—Å—Ç–∏—Ç id –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
         throttleId = 0;

      }, delay);
   }
}

function handleScroll(e) {
   refs.progress.value = e.target.scrollTop + refs.sections.clientHeight;

   console.log("scroll...");
}

refs.sections.addEventListener("scroll", throttle(handleScroll, 500));

*/
/*

// Intersection Observer

const refs = {
   progress: document.querySelector(".progress-008"),
   sections: document.querySelector(".sections-008"),
   sectionList: document.querySelectorAll(".section-008"),
};

refs.progress.value = refs.sections.clientHeight;
refs.progress.max = refs.sections.scrollHeight;

const options = {};

const onEntry = entries => {
   entries.forEach(entry => {
      const prev = document.querySelector("li.active");
      const currentId = entry.target.dataset.id;
      const currentMenuItem = document.querySelector(
         `li[data-id="${currentId}"]`, 
      );

      if (entry.isIntersecting) {
         if (prev) {
            prev.classList.remove("active");
         }
         currentMenuItem.classList.add("active");
      };
   })
};

const sectionObserver = new IntersectionObserver(onEntry, options);
refs.sectionList.forEach(section => sectionObserver.observe(section));

*/
/*

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (Intersection Observer)

const refs = {
   progress: document.querySelector(".progress-008"),
   sections: document.querySelector(".sections-008"),
   sectionList: document.querySelectorAll(".section-008"),
};

refs.progress.value = refs.sections.clientHeight;
refs.progress.max = refs.sections.scrollHeight;

const options = {
   threshold: 0.2, // 20% –≤–æ—à–ª–∞ —Å–µ—É—Ü–∏—è, —Ç–æ–ª—å–∫–æ –ø–æ—å–æ–º —Å—Ä–∞–±–æ—Ç–∫–∞
};

const onEntry = entries => {
   entries.forEach(entry => {
      const prev = document.querySelector("li.active");
      const currentId = entry.target.dataset.id;
      const currentMenuItem = document.querySelector(
         `li[data-id="${currentId}"]`, 
      );

      if (entry.isIntersecting) {

         // –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏
         const img = entry.target.querySelector("img");

         // –±–µ—Ä–µ–º url –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–æ—Ä–∞—è –≤—Ö–æ–¥–∏—Ç –≤ –≤—å—é–ø–æ—Ä—Ç
         const { url } = img.dataset;

         img.src = url

         if (prev) {
            prev.classList.remove("active");
         }
         currentMenuItem.classList.add("active");
      };
   })
};

const sectionObserver = new IntersectionObserver(onEntry, options);
refs.sectionList.forEach(section => sectionObserver.observe(section));

*/