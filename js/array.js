/*
 *
 * []
 * 
 * new Array()
 *
 */

// /* ======================================================
// ** FreeCodeCamp
// ------------------------------------------------------ */

// /* ======================================================
// ** Изменяет первый элемент

const myArray = [18,64,99];
myArray[0] = 45; 

console.log("01--", myArray); // [45,64,99]

// ------------------------------------------------------ */

// /* ======================================================
// ** 02. Достать 8

const myArray_02 = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];
const myData_02 = myArray_02[2][1]; 

console.log("02--", myData_02); // [8]

// ------------------------------------------------------ */

// /* ======================================================
// ** 03. Добавляет эдемент в конец массива
// .push()

const myArray_03 = [["John", 23], ["cat", 2]];
myArray_03.push(["dog", 3]);

console.log("03--", myArray_03); // (3) [Array(2), Array(2), Array(2)]

// ------------------------------------------------------ */

// /* ======================================================
// ** 03_2 Добавляет элемент в начало массива
// .unshift()

const myArray_03_2 = [["John", 23], ["dog", 3]];
myArray_03_2.unshift(["Paul", 35]);

console.log("03-2", myArray_03_2); // [["Paul", 35], ["John", 23], ["dog", 3]]

// ------------------------------------------------------ */

// /* ======================================================
// ** 04 Удаляет последний элемент массива
// .pop()

const myArray_04 = [["John", 23], ["cat", 2]];
const removedFromMyArray_04 = myArray_04.pop();

console.log("04--", myArray_04); // ["John", 23]

// ------------------------------------------------------ */

// /* ======================================================
// ** 04_2 Удаляет первый элемент массива
// .shift()

const myArray_04_2 = [["John", 23], ["dog", 3]];
const removedFromMyArray_04_2 = myArray_04_2.shift();

console.log("05--", myArray_04_2); // ["dog", 3]

// ------------------------------------------------------ */

// /* ======================================================
// ** 05. Функция:
// Добавляет элемент в начало массива 
// Удаляет элемент с конца массива
// Возвращает удаленное значение

function nextInLine_05(arr, item) {
  arr.push(item);
  const removedNumber = arr.shift([0]);
  return removedNumber;
};

const testArr_05 = [1,2,3,4,5];

// JSON.stringify преобразовывает елемент в строку 
console.log("Before: " + JSON.stringify(testArr_05)); // Before: [1,2,3,4,5]
console.log(nextInLine_05(testArr_05, 6));
console.log("After: " + JSON.stringify(testArr_05)); // After: [2,3,4,5,6]

// ------------------------------------------------------ */

// /* ======================================================
// ** 06. Находит минимальное число в массиве
// Math.min()

const minNumber_06 = Math.min(...[1, 5, -1, -10]);

console.log("06--", minNumber_06); // -10

// ------------------------------------------------------ */

// /* ======================================================
// ** 07. Выводит нужные слова из строки
// .split()

const [first_07, second_07, third_07, fourth_07] = 'hello sweet suny world'.split(' ');

console.log("07--", first_07, fourth_07); // hello world

// ------------------------------------------------------ */

// /* ======================================================
// ** 08. Отфильтровует числа больше 3
// .filter()

const fn_08 = (arr, val) => arr.filter(el => el > val);

console.log("08--", fn_08([1, 2, 3, 4, 5], 3)); // (2) [4, 5]

// ------------------------------------------------------ */

// /* ======================================================
// ** 09. Доступ к подсвойствам объекта в массиве

// 
const myPlants_09 = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree_09 = myPlants_09[1].list[1];

console.log("09--", secondTree_09); // pine

// ------------------------------------------------------ */

// /* ======================================================
// ** 000
// ------------------------------------------------------ */

// /* ======================================================
// ** 000
// ------------------------------------------------------ */